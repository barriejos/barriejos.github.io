---
import type { CollectionEntry } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Main from "@layouts/Main.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Pagination from "@components/Pagination.astro";
import Card from "@components/Card";
import { SITE } from "@config";

export interface Props {
  currentPage: number;
  totalPages: number;
  paginatedPosts: CollectionEntry<"blog">[];
}

const { currentPage, totalPages, paginatedPosts } = Astro.props;

// Function to let grouping and sorting by year work
function groupByYear(posts: CollectionEntry<"blog">[]) {
  return posts.reduce<Record<string, CollectionEntry<"blog">[]>>((acc, post) => {
    const year = new Date(post.data.pubDatetime).getFullYear().toString();
    if (!acc[year]) {
      acc[year] = [];
    }
    acc[year].push(post);
    return acc;
  }, {});
}
---

<Layout title={`Archive | ${SITE.title}`}>
  <Header activeNav="posts" />
  <Main pageTitle="Archive">
    {
      // Group posts by year and sort by most recent year
      Object.entries(groupByYear(paginatedPosts))
        .sort(([yearA], [yearB]) => Number(yearB) - Number(yearA))
        .map(([year, posts]) => (
          <div key={year}>
            <section id="archive-year">
              <h2>{year}</h2>
              <ul>
                {
                  // Sort posts within each year by modDatetime or pubDatetime in descending order
                  posts.sort((postA, postB) => {
                    const dateA = new Date(postA.data.modDatetime || postA.data.pubDatetime).getTime();
                    const dateB = new Date(postB.data.modDatetime || postB.data.pubDatetime).getTime();
                    return dateB - dateA;
                  }).map(({ data, slug }) => (
                    <Card href={`/archive/${slug}/`} frontmatter={data} key={slug} />
                  ))
                }
              </ul>
            </section>
          </div>
        ))
    }
  </Main>

  <Pagination
    {currentPage}
    {totalPages}
    prevUrl={`/archive${currentPage - 1 !== 1 ? "/" + (currentPage - 1) : ""}/`}
    nextUrl={`/archive/${currentPage + 1}/`}
  />

  <Footer noMarginTop={totalPages > 1} />
    
</Layout>

<style>
  #archive-year h2 {
    @apply text-2xl font-semibold tracking-wide;
  }
</style>